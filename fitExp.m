function [fit_Exp, gof, mobhalf, uncer] = fitExp(I,h, varargin)
%CREATEFIT(I)
%  Create an expoential fit, either single or double
%
%  Input:
%      I = y data, for FRAP this is intensity data, must be normalised as
%      desired to full or double
%      h = handle for Image
%      varargin:
%           time data of the same length as I data (has to go first if included)
%           'double' fits data to a double expoential as opposed to a
%           single one.
% 
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%      mobhalf: structure with fields 'moblie' abd 'halflife' containing
%      the mobile fraction and half lives for FRAP data
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 11-Jul-2014 09:10:58


%% Handle varargins:

if length(varargin) < 2
    varargin{2} = [];
end
if length(varargin) < 1 %this occurs if there are no varargin
    varargin{1} = [];
end

if length(varargin) > 2
    error('fExp:invar', 'Too many input arguments');
end

if isnumeric(varargin{1}) && ~isempty(varargin{1}) && length(varargin{1}) == length(I)
    t = varargin{1};
else
    t = 0:(length(I)-1);
end

if isempty(h)
    h = axes;
end
axes(h)

[~,instant] = min(I);

%% Fit: 
[xData, yData] = prepareCurveData( t, I );

% handle non zero time bleach event
xData = xData(instant:end);
yData = yData(instant:end);

fxData = 0:(max(xData))/10000:((max(xData)));

% for double fit
if strcmp(varargin{1},'double') || strcmp(varargin{2}, 'double')
    
    % Set up fittype and options.
    ft = fittype( 'I0 - a*exp(-b*t)- c*exp(-d*t)', 'independent', 't', 'dependent', 'y' );
    opts = fitoptions( ft );
    opts.Display = 'Off';
    opts.Lower = [0 0 0 0 0];
    opts.StartPoint = [1 0.0 0.0 0.0 0.0];
    opts.Upper = [1 Inf Inf Inf Inf];
  
    % Fit model to data.
    [fit_Exp, gof] = fit( xData, yData, ft, opts );
    
    if I(instant) == 0 %   for full normalised data
        
        % Plot fit with data.
        plot( fit_Exp, xData, yData, 'predobs' );
        led = legend( h, 'Full Normalised Intensity Data', 'Double Fit', '95% Confidence', 'Uncertinty Bounds');
    
        % set half life and mobile fraction
        mobhalf.mobile = fit_Exp.I0;
        [~,half] = min(abs((fit_Exp(fxData) - (fit_Exp.I0)/2)));
        mobhalf.halflife = fxData(half);
        
        % Title
        title('Intensity vs Time Expoential Fit: full normalised double fit')

    else % for double normalised data
        % Plot fit with data.
        plot( fit_Exp, xData, yData, 'predobs' );
        led = legend( h, 'Double Normalised Intensity Data', 'Double Fit','95% Confidence', 'Uncertinty Bounds');
        % set half life and mobile fraction
        mobhalf.mobile = (fit_Exp.a+fit_Exp.c)/(1 - fit_Exp.I0 + fit_Exp.a + fit_Exp.c);
        [~,half] = min(abs(fit_Exp(fxData) - (fit_Exp.I0+fit_Exp(0))/2));
        mobhalf.halflife = fxData(half);
        
        % Title
        title('Intensity vs Time Expoential Fit: double normalised double fit')
        
    end
    
else % for single fit

    % Set up fittype and options.
    ft = fittype( 'I0 - a*exp(-b*t)', 'independent', 't', 'dependent', 'y' );
    opts = fitoptions( ft );
    opts.Display = 'Off';
    opts.Lower = [0 0 0];
    opts.StartPoint = [1 0.0 0.0];
    opts.Upper = [1 Inf Inf];

    % Fit model to data.
    [fit_Exp, gof] = fit( xData, yData, ft, opts );
    
    % set half life and mobile fraction 
    if I(instant) == 0 %   for full normalised data
        % Plot fit with data.
        plot( fit_Exp, xData, yData,  'predobs' );
        led = legend( h, 'Full Normalised Intensity Data', 'Single Fit','95% Confidence', 'Uncertinty Bounds');
    
        mobhalf.mobile = fit_Exp.I0;
        
        % Title
        title('Intensity vs Time Expoential Fit: full normalised single fit')
        
    else % for double normalised data
        % Plot fit with data.
        plot( fit_Exp, xData, yData, 'predobs' );
        led = legend( h, 'Double Normalised Intensity Data', 'Single Fit','95% Confidence', 'Uncertinty Bounds');
    
        mobhalf.mobile = fit_Exp.a/(1 - fit_Exp.I0 + fit_Exp.a);

        % Title
        title('Intensity vs Time Expoential Fit: double normalised single fit')
        
    end
    
    mobhalf.halflife = log(2)/(fit_Exp.b);

end
% set the Uncertainties:

con = confint(fit_Exp,0.682);% 68.2% confidence interval for each fit parameter (lower and upper bounds as first and second rows).
err = (con(2,:)-con(1,:))/2; % Standard deviation of each fit parameter (probability to be between -STDEV and +STDEV is 68.2%).

uncer.I0 = err(1);
uncer.a = err(2);
uncer.b = err(3);
if strcmp(varargin{1},'double') || strcmp(varargin{2}, 'double')
    uncer.c = err(4);
    uncer.d = err(5);
    
    if I(instant) == 0 
        uncer.mobile = uncer.I0;
    else
        dem = (1-fit_Exp.I0+fit_Exp.a+fit_Exp.b)^(-1);
        uncer.mobile = sqrt( ( dem - (fit_Exp.a + fit_Exp.b)*dem^2)^2 * (uncer.a^2 + uncer.b^2) + ((fit_Exp.a + fit_Exp.b) *dem^2)^2 * (uncer.I0)^2 );
    end
    halfyerror = predint(fit_Exp, fxData(half));
    [~,halfway1] = min(abs((fit_Exp(fxData) - halfyerror(1))));
    [~,halfway2] = min(abs((fit_Exp(fxData) - halfyerror(2))));
    uncer.halflife = fxData(halfway2) - fxData(halfway1);
        
else
    if I(instant) == 0 
        uncer.mobile = uncer.I0;
    else
        dem = (1-fit_Exp.I0+fit_Exp.a)^(-1);
        uncer.mobile = sqrt( (dem - fit_Exp.a*dem^2)^2 * (uncer.a)^2 + ( fit_Exp.a*dem^2 )^2 * (uncer.I0)^2  );
    end
    uncer.halflife = (log(2)/((fit_Exp.b)^2))*uncer.b;
end



%% Making Graphs
% Label axes
axis([min(xData),max(xData),0,max(yData)+0.05])
ylabel( 'Intensity Data' );xlabel( 'Time/s' );
grid on
set(gca, 'GridLineStyle', '-');
grid(gca,'minor')

% % show GOF
% str1(1) = {'Goodness Of Fit Data:'};
% str1(2)= {[' sse:             ', num2str(gof.sse)]};
% str1(3)= {[' rsquare:      ', num2str(gof.rsquare)]};
% str1(4)= {[' dfe:             ', num2str(gof.dfe)]};
% str1(5)= {[' adjrsquare: ', num2str(gof.adjrsquare)]}; 
% str1(6)= {[' rmse:          ', num2str(gof.rmse)]};
% 
% text(xData(5), 1.025, str1,'FontWeight','bold','BackgroundColor', [1,1,1],'VerticalAlignment','top','HorizontalAlignment','left','FontSize', 8);

set(led, 'Location', 'best' )

